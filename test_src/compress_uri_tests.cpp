#include "utilities.hpp"

#include <gtest/gtest.h>

TEST(CompressURI, HelloWorld) {
  std::string input(hello_world);

  std::vector<uint16_t> result = {66, 73, 85,  119, 78,  109, 68, 50,
                                  65, 69, 68,  113, 107, 67,  99, 119,
                                  66, 78, 111, 69,  73,  78,  65};

  EXPECT_TRUE(compare_u16(LZStringOptions::URI, input, result));
}

TEST(CompressURI, AllASCII) {
  std::string input(all_ascii);

  std::vector<uint16_t> result = {
      65,  81,  81,  103, 82,  65,  120, 65,  74,  65,  112, 65,  90,  65,  99,
      103, 66,  81,  69,  111, 66,  85,  66,  113, 65,  78,  65,  87,  103, 72,
      81,  68,  48,  65,  68,  65,  73,  119, 66,  77,  65,  122, 65,  67,  119,
      67,  115, 65,  98,  65,  79,  119, 65,  99,  65,  110, 65,  70,  119, 68,
      99,  65,  80,  65,  76,  119, 66,  56,  65,  102, 103, 65,  67,  65,  81,
      81,  66,  67,  65,  89,  81,  65,  105, 65,  85,  81,  66,  105, 65,  99,
      81,  65,  83,  65,  83,  81,  66,  83,  65,  97,  81,  65,  121, 65,  87,
      81,  66,  121, 65,  101, 81,  65,  75,  65,  82,  81,  66,  75,  65,  90,
      81,  65,  113, 65,  86,  81,  66,  113, 65,  100, 81,  65,  97,  65,  84,
      81,  66,  97,  65,  98,  81,  65,  54,  65,  88,  81,  66,  54,  65,  80,
      111, 65,  66,  103, 67,  71,  65,  69,  89,  65,  120, 103, 65,  109, 65,
      75,  89,  65,  90,  103, 68,  109, 65,  66,  89,  65,  108, 103, 66,  87,
      65,  78,  89,  65,  78,  103, 67,  50,  65,  72,  89,  65,  57,  103, 65,
      79,  65,  73,  52,  65,  84,  103, 68,  79,  65,  67,  52,  65,  114, 103,
      66,  117, 65,  79,  52,  65,  72,  103, 67,  101, 65,  70,  52,  65,  51,
      103, 65,  43,  65,  76,  52,  65,  102, 107, 65};

  EXPECT_TRUE(compare_u16(LZStringOptions::URI, input, result));
}

TEST(CompressURI, JSON) {
  std::string input(temp_json);

  std::vector<uint16_t> result = {
      78,  52,  73,  103, 122, 103, 76,  103, 84,  103, 108, 103, 100, 103, 99,
      120, 65,  76,  104, 65,  67,  81,  75,  89,  66,  115, 115, 72,  115, 65,
      48,  65,  66,  65,  79,  113, 53,  82,  89,  65,  109, 65,  104, 67,  80,
      105, 72,  65,  75,  52,  67,  50,  65,  82,  104, 108, 67,  103, 73,  119,
      66,  77,  65,  122, 72,  83,  49,  121, 52,  115, 71,  65,  73,  90,  119,
      85,  48,  66,  104, 106, 113, 77,  99,  75,  79,  86,  106, 113, 105, 111,
      85,  85,  81,  69,  56,  85,  65,  98,  85,  55,  53,  117, 43,  102, 103,
      66,  90,  56,  65,  86,  103, 67,  54,  100, 88,  67,  119, 66,  87,  71,
      65,  77,  89,  81,  85,  111, 79,  75,  75,  89,  89,  85,  73,  65,  70,
      75,  52,  65,  70,  110, 69,  73,  65,  73,  114, 106, 117, 121, 103, 106,
      117, 121, 76,  119, 65,  68,  74,  90,  50,  100, 103, 119, 65,  68,  113,
      73,  81,  77,  76,  103, 83,  113, 65,  68,  75,  117, 65,  66,  109, 69,
      65,  68,  117, 75,  104, 105, 66,  71,  65,  66,  117, 50,  76,  106, 120,
      55,  67,  65,  65,  118, 114, 73,  89,  107, 66,  103, 85,  65,  80,  112,
      87,  116, 103, 53,  79,  73,  75,  73,  85,  70,  70,  66,  49,  89,  79,
      50,  81,  80,  82,  105, 79,  113, 68,  121, 56,  104, 65,  67,  121, 111,
      118, 67,  69,  54,  89,  53,  48,  100, 106, 65,  81,  109, 113, 103, 65,
      103, 110, 68,  113, 69,  76,  105, 53,  69,  110, 83,  81,  83,  101, 69,
      103, 65,  77,  73,  114, 116, 67,  65,  65,  88,  106, 68,  120, 72,  113,
      79,  71,  74,  116, 85,  49,  72,  97,  111, 97,  122, 86,  110, 78,  78,
      118, 89,  81,  102, 99,  104, 97,  122, 113, 52,  72,  110, 117, 74,  67,
      107, 69,  81,  104, 48,  119, 105, 104, 117, 67,  89,  97,  114, 56,  51,
      66,  52,  65,  69,  74,  87,  71,  90,  77,  82,  89,  43,  85,  54,  105,
      77,  72,  73,  81,  121, 82,  75,  112, 109, 75,  112, 65,  65};

  EXPECT_TRUE(compare_u16(LZStringOptions::URI, input, result));
}

TEST(CompressURI, JSONFloat) {
  std::string input(temp_json_float);

  std::vector<uint16_t> result = {
      78,  52,  73,  103, 90,  103, 78,  103, 57,  103, 104, 103, 76,  105, 65,
      88,  65,  90,  103, 72,  81,  69,  89,  65,  115, 54,  67,  115, 66,  79,
      65,  71,  104, 65,  66,  77,  111, 66,  88,  65,  73,  119, 103, 70,  77,
      107, 65,  109, 86,  65,  100, 110, 81,  65,  52,  54,  87,  105, 65,  55,
      97,  103, 99,  51,  103, 69,  115, 65,  98,  116, 81,  66,  105, 48,  101,
      69,  103, 67,  48,  65,  66,  103, 120, 49,  107, 109, 72,  69,  87,  111,
      65,  80,  65,  65,  53,  82,  117, 110, 79,  80,  120, 103, 81,  120, 115,
      66,  73,  108, 110, 84,  84,  54,  101, 85,  82,  103, 65,  110, 75,  122,
      65,  67,  101, 65,  101, 84,  65,  72,  52,  65,  90,  121, 81,  66,  116,
      100, 66,  103, 73,  77,  54,  66,  78,  71,  81,  67,  84,  70,  82,  77,
      65,  104, 120, 85,  72,  65,  66,  100, 73,  105, 103, 75,  65,  67,  116,
      113, 65,  71,  77,  52,  65,  72,  86,  43,  79,  65,  65,  76,  70,  122,
      104, 51,  82,  70,  65,  49,  102, 105, 81,  48,  76,  70,  120, 67,  69,
      70,  112, 69,  66,  109, 89,  50,  70,  103, 66,  102, 76,  109, 112, 88,
      79,  71,  112, 105, 66,  119, 84,  107, 116, 73,  122, 115, 56,  86,  121,
      107, 65,  113, 104, 43,  98,  88,  54,  81,  70,  83,  82,  118, 100, 67,
      73,  55,  101, 108, 81,  54,  79,  118, 109, 103, 65};

  EXPECT_TRUE(compare_u16(LZStringOptions::URI, input, result));
}