#include "utilities.hpp"

#include <algorithm>
#include <gtest/gtest.h>
#include "../src/lz_string.hpp"

bool compare(const std::vector<uint8_t>& a, const std::vector<uint8_t>& b) {
  if(a.size() != b.size()) {
    return false;
  }

  return std::equal(a.begin(), a.end(), b.begin());
}

TEST(CompressUint8Array, HelloWorld) {
  std::string input(hello_world);

  std::vector<uint8_t> compressed = pxd::lz_string::compressUint8Array(pxd::lz_string::to_utf16(input));
  std::vector<uint8_t> result = {4, 133, 48, 54, 96, 246, 0, 64, 234, 144, 39, 48, 4, 218, 4, 32, 208, 0};

  EXPECT_TRUE(compare(result, compressed));
}

TEST(CompressUint8Array, AllASCII) {
  std::string input(all_ascii);

  std::vector<uint8_t> compressed = pxd::lz_string::compressUint8Array(pxd::lz_string::to_utf16(input));
  std::vector<uint8_t> result = {1, 4, 32, 68, 12, 64, 36, 10, 64, 100, 7, 32, 5, 1, 40, 5, 64, 106, 0, 208, 22, 128, 116, 3, 208, 0, 192, 35, 0, 76, 3, 48, 2, 192, 43, 0, 108, 3, 176, 1, 192, 39, 0, 92, 3, 112, 3, 192, 47, 0, 124, 1, 248, 0, 8, 4, 16, 4, 32, 24, 64, 8, 128, 81, 0, 98, 1, 196, 0, 72, 4, 144, 5, 32, 26, 64, 12, 128, 89, 0, 114, 1, 228, 0, 40, 4, 80, 4, 160, 25, 64, 10, 128, 85, 0, 106, 1, 212, 0, 104, 4, 208, 5, 160, 27, 64, 14, 128, 93, 0, 122, 0, 250, 0, 6, 0, 134, 0, 70, 0, 198, 0, 38, 0, 166, 0, 102, 0, 230, 0, 22, 0, 150, 0, 86, 0, 214, 0, 54, 0, 182, 0, 118, 0, 246, 0, 14, 0, 142, 0, 78, 0, 206, 0, 46, 0, 174, 0, 110, 0, 238, 0, 30, 0, 158, 0, 94, 0, 222, 0, 62, 0, 190, 0, 126, 64, 0, 0};

  EXPECT_TRUE(compare(result, compressed));
}

TEST(CompressUint8Array, JSON) {
  std::string input(temp_json);

  std::vector<uint8_t> compressed = pxd::lz_string::compressUint8Array(pxd::lz_string::to_utf16(input));
  std::vector<uint8_t> result = {55, 130, 32, 206, 2, 224, 78, 9, 96, 118, 7, 49, 0, 184, 64, 9, 2, 152, 6, 203, 7, 176, 13, 0, 4, 3, 170, 229, 22, 0, 152, 8, 66, 62, 33, 192, 43, 128, 182, 1, 24, 101, 10, 2, 48, 4, 192, 51, 29, 45, 114, 226, 193, 128, 33, 156, 20, 208, 24, 99, 168, 199, 10, 57, 88, 234, 138, 133, 20, 64, 79, 20, 1, 181, 59, 230, 239, 159, 128, 22, 124, 1, 88, 2, 233, 213, 194, 192, 21, 134, 0, 198, 16, 82, 131, 138, 41, 134, 20, 32, 1, 74, 224, 1, 103, 16, 128, 8, 174, 59, 178, 130, 59, 178, 47, 0, 3, 37, 157, 157, 131, 0, 3, 168, 132, 12, 46, 4, 170, 0, 50, 174, 0, 25, 132, 0, 59, 138, 134, 32, 70, 0, 27, 182, 46, 60, 123, 8, 0, 47, 172, 134, 36, 6, 5, 0, 62, 149, 173, 131, 147, 136, 40, 133, 5, 20, 29, 88, 59, 100, 15, 70, 35, 170, 15, 47, 33, 0, 44, 168, 188, 33, 58, 99, 157, 29, 140, 4, 38, 170, 0, 32, 156, 58, 132, 46, 46, 68, 157, 36, 18, 120, 72, 0, 48, 138, 237, 8, 0, 23, 140, 60, 71, 168, 225, 137, 181, 77, 71, 106, 134, 179, 86, 115, 77, 189, 132, 31, 114, 22, 179, 171, 129, 231, 184, 144, 164, 17, 8, 116, 194, 40, 110, 9, 134, 171, 243, 112, 120, 0, 66, 86, 25, 147, 17, 99, 229, 58, 136, 193, 200, 67, 36, 74, 166, 98, 169, 0};

  EXPECT_TRUE(compare(result, compressed));
}

TEST(CompressUint8Array, JSONFloat) {
  std::string input(temp_json_float);

  std::vector<uint8_t> compressed = pxd::lz_string::compressUint8Array(pxd::lz_string::to_utf16(input));
  std::vector<uint8_t> result = {55, 130, 32, 102, 3, 96, 246, 8, 96, 46, 32, 23, 1, 152, 7, 64, 70, 0, 179, 160, 172, 4, 224, 6, 132, 0, 76, 160, 21, 192, 35, 8, 5, 50, 64, 38, 84, 7, 103, 64, 14, 58, 90, 32, 59, 106, 7, 55, 128, 75, 0, 110, 212, 1, 139, 71, 132, 128, 45, 0, 6, 12, 117, 146, 97, 196, 90, 128, 15, 0, 14, 81, 186, 115, 143, 198, 4, 49, 176, 18, 37, 157, 52, 250, 121, 68, 96, 2, 114, 179, 0, 39, 128, 121, 48, 7, 224, 6, 114, 64, 27, 93, 6, 2, 12, 232, 19, 70, 64, 36, 197, 68, 192, 33, 197, 65, 192, 5, 210, 34, 128, 160, 2, 182, 160, 6, 51, 128, 7, 87, 227, 128, 0, 177, 115, 135, 116, 69, 3, 87, 226, 67, 66, 197, 196, 33, 5, 164, 64, 102, 99, 97, 96, 5, 242, 230, 165, 115, 134, 166, 32, 112, 78, 75, 72, 206, 207, 21, 202, 64, 42, 135, 230, 215, 233, 1, 82, 70, 247, 66, 35, 183, 165, 67, 163, 175, 154, 0};

  EXPECT_TRUE(compare(result, compressed));
}
